@using VacationPlannerPro.Business.DTOs.VacationDTOs
@using VacationPlannerPro.Data.Enums
@using VacationPlannerPro.Web.Helpers
@model UpdateVacationDTO

@{
    ViewBag.Title = "Edit Vacation";
    Layout = "~/Areas/Admin/Views/Shared/_Layout.cshtml";
}

<div class="row justify-content-center">
    <div class="col-lg-6">
        <div class="card shadow-sm border-0 rounded-lg mt-3">
            <div class="card-header">
                <h3 class="text-center font-weight-light my-4">Edit Vacation</h3>
            </div>
            <div class="card-body">
                @using (Html.BeginForm("Edit", "Vacations", FormMethod.Post, new { @class = "needs-validation", @novalidate = "novalidate" }))
                {
                    @Html.AntiForgeryToken()
                    @Html.HiddenFor(model => model.Id)

                    <div class="mb-3">
                        @Html.LabelFor(model => model.StartDate, htmlAttributes: new { @class = "form-label" })
                        @Html.EditorFor(model => model.StartDate, new { htmlAttributes = new { @class = "form-control", type = "date" } })
                        @Html.ValidationMessageFor(model => model.StartDate, "", new { @class = "text-danger" })
                    </div>

                    <div class="mb-3">
                        @Html.LabelFor(model => model.EndDate, htmlAttributes: new { @class = "form-label" })
                        @Html.EditorFor(model => model.EndDate, new { htmlAttributes = new { @class = "form-control", type = "date" } })
                        @Html.ValidationMessageFor(model => model.EndDate, "", new { @class = "text-danger" })
                    </div>

                    <div class="mb-3">
                        @Html.LabelFor(model => model.Type, htmlAttributes: new { @class = "form-label" })
                        @Html.DropDownListFor(model => model.Type, EnumExtensions.GetEnumSelectList<VacationTypeEnum>(), "-- Select Vacation Type --", new { @class = "form-select" })
                        @Html.ValidationMessageFor(model => model.Type, "", new { @class = "text-danger" })
                    </div>

                    <div class="mb-3">
                        <label for="WorkerDropdown" class="form-label">Worker</label>
                        <select id="WorkerDropdown" name="WorkerId" class="form-select">
                            <option value="" disabled selected>Select a Worker</option>
                        </select>
                        @Html.ValidationMessageFor(model => model.WorkerId, "", new { @class = "text-danger" })
                    </div>

                    <div class="d-flex justify-content-between mt-4">
                        <a class="btn btn-outline-primary" href="@Url.Action("Index", "Vacations", new { area = "Admin" })">
                            <i class="fa-solid fa-chevron-left"></i> Back to List
                        </a>
                        <button type="submit" class="btn btn-primary">Save Changes</button>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            const workerId = '@Model.WorkerId';
            populateDropdown(
                '@Url.Action("GetAllWorkers", "Workers", new { area = "Admin" })',
                'WorkerDropdown',
                'Select a Worker',
                workerId
            );
        });
    </script>
}
